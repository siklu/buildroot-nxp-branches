--- a/tools/env/fw_env.c
+++ b/tools/env/fw_env.c
@@ -311,9 +311,18 @@ int fw_env_flush(struct env_opts *opts)
        int ret;
 
        if (!opts)
+    {
+               fprintf(stderr,
+                       "Alan debug : %s %s %d\n", __FILE__, __func__, __LINE__);
                opts = &default_opts;
+    }
+
+       fprintf(stderr,
+                       "Alan debug : %s %s %d otp->aes_flag: %d\n", __FILE__, __func__, __LINE__, opts->aes_flag);
 
        if (opts->aes_flag) {
+           fprintf(stderr,
+                   "Alan debug : %s %s %d\n", __FILE__, __func__, __LINE__);
                ret = env_aes_cbc_crypt(environment.data, 1,
                                        opts->aes_key);
                if (ret) {
@@ -322,6 +331,8 @@ int fw_env_flush(struct env_opts *opts)
                        return ret;
                }
        }
+       fprintf(stderr,
+               "Alan debug : %s %s %d\n", __FILE__, __func__, __LINE__);
 
        /*
         * Update CRC
@@ -984,17 +995,32 @@ static int env_aes_cbc_crypt(char *payload, const int enc, uint8_t *key)
        uint8_t key_exp[AES_EXPAND_KEY_LENGTH];
        uint32_t aes_blocks;
 
+       fprintf(stderr,
+                   "Alan debug : %s %s %d\n", __FILE__, __func__, __LINE__);
+
        /* First we expand the key. */
        aes_expand_key(key, key_exp);
 
+       fprintf(stderr,
+                   "Alan debug : %s %s %d\n", __FILE__, __func__, __LINE__);
        /* Calculate the number of AES blocks to encrypt. */
        aes_blocks = DIV_ROUND_UP(len, AES_KEY_LENGTH);
 
        if (enc)
+    {
+           fprintf(stderr,
+                   "Alan debug : %s %s %d\n", __FILE__, __func__, __LINE__);
                aes_cbc_encrypt_blocks(key_exp, data, data, aes_blocks);
+    }
        else
+    {
+           fprintf(stderr,
+                   "Alan debug : %s %s %d\n", __FILE__, __func__, __LINE__);
                aes_cbc_decrypt_blocks(key_exp, data, data, aes_blocks);
+    }
 
+       fprintf(stderr,
+                   "Alan debug : %s %s %d\n", __FILE__, __func__, __LINE__);
        return 0;
 }
 

