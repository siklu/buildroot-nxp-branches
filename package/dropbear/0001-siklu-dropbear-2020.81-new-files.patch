From f2a2c4ed2d90e41b5dada9de6ba419428487739f Mon Sep 17 00:00:00 2001
From: Jonathan BEN-AVRAHAM <jonathan.ba@siklu.com>
Date: Fri, 10 Jun 2022 11:37:53 +0300
Subject: [PATCH] siklu-dropbear-2020.81-new-files

---
 siklu_dropbear.c | 153 +++++++++++++++++++++++++++++++++++++++++++++++
 siklu_pwd.h      |  31 ++++++++++
 2 files changed, 184 insertions(+)
 create mode 100644 siklu_dropbear.c
 create mode 100644 siklu_pwd.h

diff --git a/siklu_dropbear.c b/siklu_dropbear.c
new file mode 100644
index 0000000..cc4f68b
--- /dev/null
+++ b/siklu_dropbear.c
@@ -0,0 +1,153 @@
+/*
+ * siklu_dropbear.c
+ *
+ *  Created on: Jun 26, 2014
+ *      Author: edwardk
+ *
+ *
+ Follow method operates on original /etc/passwd and /etc/shadow files
+ siklu_getpwnam_passwd_file(name). It works.
+ *
+
+ *
+ */
+
+#include "includes.h"
+#include "session.h"
+#include "dbutil.h"
+#include "packet.h"
+#include "algo.h"
+#include "buffer.h"
+#include "dss.h"
+#include "ssh.h"
+
+#include <stddef.h>
+#include <sys/types.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+#include <pwd.h>
+#include <syslog.h>
+#include <unistd.h>
+#include <time.h>
+
+// #define PAM_DEBUG
+#undef PAM_DEBUG
+
+#ifdef PAM_DEBUG
+# define debugp syslog
+#else
+# define debugp(fmt, a...)
+#endif
+
+#define MAX_TEMP_BUFFER		128
+#define MAX_CRYPTED_PASS	128
+
+typedef enum { // declares linux groups. see /etc/groups file
+	E_USER_TYPE_DEBUG = 0, /* This is real superuser (root) */
+	E_USER_TYPE_USER = 1000,
+	E_USER_TYPE_TECH,
+	E_USER_TYPE_SUPER,
+	E_USER_TYPE_ADMIN = 1100,
+	E_USER_TYPE_REMOTE_AUTH = 1200,
+// tacacs AAA user
+} T_USER_TYPE; // copied from CaExternal.h
+
+static int pw_uid = 800; // base for all new user's ID
+
+static int PAM_GenerateRandomUserPassword(int passw_len, char* passw) //
+{
+	int i;
+
+	static const char alphanum[] = "0123456789"
+			"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
+			"abcdefghijklmnopqrstuvwxyz";
+	srand(time(NULL));
+	for (i = 0; i < passw_len; ++i) //
+			{
+		passw[i] = alphanum[rand() % (sizeof(alphanum) - 1)];
+	}
+
+	passw[passw_len] = 0;
+	debugp(LOG_NOTICE, "%s() Generated passw %s\n", __func__, passw);
+	return 0;
+
+}
+
+#define   MAX_USER_PASS	16
+
+/*
+ * Check if user already defined in process environment area
+ * 		if yes, fill passwd struct by user parameters
+ * 		if not generate user params in an environment
+ *
+ *
+ *
+ */
+static struct passwd *siklu_getpwnam_virtual_user(const char *name) //
+{
+	static struct passwd ret;
+	char temp[MAX_USER_PASS];
+	char* env_user_name = getenv("V_USER");
+	if (env_user_name == NULL) {
+		// generate environment variables
+
+		PAM_GenerateRandomUserPassword(MAX_USER_PASS - 1, temp);
+		setenv("V_USER", name, 1);
+		setenv("V_PASSWD", temp, 1);
+		setenv("V_DIR", "/home/sw", 1);
+		setenv("V_SHELL", "/home/sw/bin/cli", 1);
+
+	}
+
+	ret.pw_name = getenv("V_USER");
+	ret.pw_passwd = getenv("V_PASSWD");
+	ret.pw_uid = 900;
+
+	ret.pw_gid = E_USER_TYPE_REMOTE_AUTH;
+	ret.pw_gecos = getenv("V_USER");
+	ret.pw_dir = getenv("V_DIR");
+	ret.pw_shell = getenv("V_SHELL");
+
+	return (struct passwd *) &ret;
+
+}
+
+// ====================   Global functions ==================================
+
+struct passwd *_getpwnam(const char *name) {
+	struct passwd *ret = NULL;
+
+	ret = getpwnam(name);
+	debugp(LOG_NOTICE, "%s() called for user %s, ret val %p, process ID %d",
+			__func__, name, ret, getpid());
+	if (ret != NULL) { // user registered in /etc/passwd
+		debugp(LOG_NOTICE, " User \"%s\" exists in /etc/passwd", name);
+	} else {
+		debugp(LOG_NOTICE, " Add User %s to a system", name);
+		ret = siklu_getpwnam_virtual_user(name); // (see remarks in file header)
+	} //
+	debugp(LOG_NOTICE, "pw_name \"%s\", pw_passwd \"%s\", pw_uid %d, pw_gid %d",
+			ret->pw_name, ret->pw_passwd, ret->pw_uid, ret->pw_gid);debugp(LOG_NOTICE, "pw_gecos \"%s\", pw_dir \"%s\", pw_shell \"%s\"",
+			ret->pw_gecos, ret->pw_dir, ret->pw_shell);
+	return ret;
+}
+
+/*
+ *
+ *
+ */
+struct passwd *_getpwuid(uid_t uid) {
+	struct passwd *ret;
+	ret = getpwuid(uid);
+
+	if (uid != 0) {// the function called by scp request. only root allowed execute it
+		syslog(LOG_ERR, "%s   %s() The function should not be called! uid %d, ret %p", __FILE__, __func__, uid, ret);
+	}
+	if (ret != NULL) { // edikk remove after debug
+		debugp(LOG_NOTICE, "pw_name %s, pw_passwd %s, pw_uid %d, pw_gid %d",
+				ret->pw_name, ret->pw_passwd, ret->pw_uid, ret->pw_gid);debugp(LOG_NOTICE, "pw_gecos %s, pw_dir %s, pw_shell %s", ret->pw_gecos,
+				ret->pw_dir, ret->pw_shell);
+	}
+	return ret;
+}
diff --git a/siklu_pwd.h b/siklu_pwd.h
new file mode 100644
index 0000000..1350da8
--- /dev/null
+++ b/siklu_pwd.h
@@ -0,0 +1,31 @@
+/*
+ * siklu_pwd.h
+ *
+ *  Created on: Jun 26, 2014
+ *      Author: edwardk
+ */
+
+#ifndef SIKLU_PWD_H_
+#define SIKLU_PWD_H_
+
+
+/*
+ * struct passwd {
+		 char   *pw_name;       / * username * /
+		 char   *pw_passwd;     / * user password * /
+		 uid_t   pw_uid;        / * user ID * /
+		 gid_t   pw_gid;        / * group ID * /
+		 char   *pw_gecos;      / * user information * /
+		 char   *pw_dir;        / * home directory * /
+		 char   *pw_shell;      / * shell program * /
+		 };
+*/
+
+
+extern struct passwd *_getpwnam(const char *name);
+
+extern struct passwd *_getpwuid(uid_t uid);
+
+
+
+#endif /* SIKLU_PWD_H_ */
-- 
2.17.1

