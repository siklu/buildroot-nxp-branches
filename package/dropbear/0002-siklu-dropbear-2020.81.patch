From 9bcb6dea71cb8ab44dc20c1565c57b16ca3240ba Mon Sep 17 00:00:00 2001
From: Jonathan BEN-AVRAHAM <jonathan.ba@siklu.com>
Date: Fri, 10 Jun 2022 10:44:48 +0300
Subject: [PATCH] siklu-dropbear-2020.81

---
 cli-kex.c         |  2 +-
 cli-runopts.c     |  2 +-
 common-session.c  |  2 +-
 dbutil.c          |  2 +-
 default_options.h | 12 +++++++-----
 dropbearkey.c     |  2 +-
 includes.h        |  2 ++
 loginrec.c        |  2 +-
 svr-authpam.c     | 32 ++++++++++++++++++++++++++++----
 svr-chansession.c |  5 +++--
 sysoptions.h      |  2 +-
 11 files changed, 47 insertions(+), 18 deletions(-)

diff --git a/cli-kex.c b/cli-kex.c
index 4f2a884..b6b2c72 100644
--- a/cli-kex.c
+++ b/cli-kex.c
@@ -248,7 +248,7 @@ static FILE* open_known_hosts_file(int * readonly)
 
 	if (!homedir) {
 		struct passwd * pw = NULL;
-		pw = getpwuid(getuid());
+		pw = _getpwuid(getuid()); // Siklu
 		if (pw) {
 			homedir = pw->pw_dir;
 		}
diff --git a/cli-runopts.c b/cli-runopts.c
index 3654b9a..2588849 100644
--- a/cli-runopts.c
+++ b/cli-runopts.c
@@ -734,7 +734,7 @@ static void fill_own_user() {
 
 	uid = getuid();
 
-	pw = getpwuid(uid);
+	pw = _getpwuid(uid); // Siklu
 	if (pw && pw->pw_name != NULL) {
 		cli_opts.own_user = m_strdup(pw->pw_name);
 	} else {
diff --git a/common-session.c b/common-session.c
index bfe6284..bb10869 100644
--- a/common-session.c
+++ b/common-session.c
@@ -628,7 +628,7 @@ void fill_passwd(const char* username) {
 	if (ses.authstate.pw_passwd)
 		m_free(ses.authstate.pw_passwd);
 
-	pw = getpwnam(username);
+	pw = _getpwnam(username); // Siklu
 	if (!pw) {
 		return;
 	}
diff --git a/dbutil.c b/dbutil.c
index 5af6330..3f2a95f 100644
--- a/dbutil.c
+++ b/dbutil.c
@@ -640,7 +640,7 @@ if (strncmp(inpath, "~/", 2) == 0) {
		char *homedir = getenv("HOME");

		if (!homedir) {
-			pw = getpwuid(getuid());
+			pw = _getpwuid(getuid()); // Siklu
			if (pw) {
				homedir = pw->pw_dir;
			}
diff --git a/default_options.h b/default_options.h
index 375506d..9ce6946 100644
--- a/default_options.h
+++ b/default_options.h
@@ -192,16 +192,18 @@ group1 in Dropbear server too */
 #define MOTD_FILENAME "/etc/motd"
 
 /* Authentication Types - at least one required.
-   RFC Draft requires pubkey auth, and recommends password */
-#define DROPBEAR_SVR_PASSWORD_AUTH 1
+   RFC Draft requires pubkey auth, and recommends password 
+   Siklu - changed to '0' */
+#define DROPBEAR_SVR_PASSWORD_AUTH 0
 
 /* Note: PAM auth is quite simple and only works for PAM modules which just do
  * a simple "Login: " "Password: " (you can edit the strings in svr-authpam.c).
  * It's useful for systems like OS X where standard password crypts don't work
  * but there's an interface via a PAM module. It won't work for more complex
  * PAM challenge/response.
- * You can't enable both PASSWORD and PAM. */
-#define DROPBEAR_SVR_PAM_AUTH 0
+ * You can't enable both PASSWORD and PAM. 
+  Siklu - changed to '1' */
+#define DROPBEAR_SVR_PAM_AUTH 1
 
 /* ~/.ssh/authorized_keys authentication */
 #define DROPBEAR_SVR_PUBKEY_AUTH 1
@@ -250,7 +252,7 @@ Homedir is prepended unless path begins with / */
 
 /* And then a global limit to avoid chewing memory if connections 
  * come from many IPs */
-#define MAX_UNAUTH_CLIENTS 30
+#define MAX_UNAUTH_CLIENTS 10 /*Siklu was 30*/
 
 /* Default maximum number of failed authentication tries (server option) */
 /* -T server option overrides */
diff --git a/dropbearkey.c b/dropbearkey.c
index 8d8c7c2..ef1857c 100644
--- a/dropbearkey.c
+++ b/dropbearkey.c
@@ -351,7 +351,7 @@ static void printpubkey(sign_key * key, int keytype) {
 
 	/* a user@host comment is informative */
 	username = "";
-	pw = getpwuid(getuid());
+	pw = _getpwuid(getuid()); // Siklu
 	if (pw) {
 		username = pw->pw_name;
 	}
diff --git a/includes.h b/includes.h
index 884ebf7..1e4c117 100644
--- a/includes.h
+++ b/includes.h
@@ -60,6 +60,8 @@
 #include <time.h>
 #include <setjmp.h>
 
+#include "siklu_pwd.h"   // Siklu
+
 #ifdef HAVE_UTMP_H
 #include <utmp.h>
 #endif
diff --git a/loginrec.c b/loginrec.c
index af10d95..dd202f6 100644
--- a/loginrec.c
+++ b/loginrec.c
@@ -275,7 +275,7 @@ login_init_entry(struct logininfo *li, int pid, const char *username,
 
 	if (username) {
 		strlcpy(li->username, username, sizeof(li->username));
-		pw = getpwnam(li->username);
+		pw = _getpwnam(li->username); // Siklu
 		if (pw == NULL)
 			dropbear_exit("login_init_entry: Cannot find user \"%s\"",
 					li->username);
diff --git a/svr-authpam.c b/svr-authpam.c
index e236db4..8d347ee 100644
--- a/svr-authpam.c
+++ b/svr-authpam.c
@@ -250,9 +250,10 @@ void svr_auth_pam(int valid_user) {
 	/* (void) pam_set_item(pamHandlep, PAM_FAIL_DELAY, (void*) pamDelayFunc); */
 
 	if ((rc = pam_authenticate(pamHandlep, 0)) != PAM_SUCCESS) {
-		dropbear_log(LOG_WARNING, "pam_authenticate() failed, rc=%d, %s", 
+		// Siklu In log below LOG_WARNING replaced by LOG_NOTICE
+		dropbear_log(LOG_NOTICE, "pam_authenticate() failed, rc=%d, %s", 
 				rc, pam_strerror(pamHandlep, rc));
-		dropbear_log(LOG_WARNING,
+		dropbear_log(LOG_NOTICE,
 				"Bad PAM password attempt for '%s' from %s",
 				printable_user,
 				svr_ses.addrstring);
@@ -261,9 +262,10 @@ void svr_auth_pam(int valid_user) {
 	}
 
 	if ((rc = pam_acct_mgmt(pamHandlep, 0)) != PAM_SUCCESS) {
-		dropbear_log(LOG_WARNING, "pam_acct_mgmt() failed, rc=%d, %s", 
+		// Siklu In log below LOG_WARNING replaced by LOG_NOTICE
+		dropbear_log(LOG_NOTICE, "pam_acct_mgmt() failed, rc=%d, %s", 
 				rc, pam_strerror(pamHandlep, rc));
-		dropbear_log(LOG_WARNING,
+		dropbear_log(LOG_NOTICE,
 				"Bad PAM password attempt for '%s' from %s",
 				printable_user,
 				svr_ses.addrstring);
@@ -274,6 +278,28 @@ void svr_auth_pam(int valid_user) {
 		goto cleanup;
 	}
 
+	// ========================== Siklu addition start ===========================
+	char **pam_envlist, **pam_env;
+	// store/export PAM environment in a process environment
+	// create also file in /tmp/web-auth/<user_name> and write pam env variables to the file
+
+	dropbear_log(LOG_NOTICE,"%s() process pid %d, parrent pid %d", __func__,   getpid(),  getppid());
+	if ((pam_envlist = pam_getenvlist(pamHandlep)) != NULL) {  // Siklu
+		for (pam_env = pam_envlist; *pam_env != NULL; ++pam_env) {
+			int rc;
+
+			char* p = strstr(*pam_env, "=");
+			if (p != NULL) {
+				*p = 0;
+				rc = setenv(*pam_env, ++p, 1);
+				dropbear_log(LOG_NOTICE,"%s() current PAM environment - %s, val %s, rc - %d",	__func__, *pam_env, p, rc);
+				free(*pam_env);
+			}
+		}
+		free(pam_envlist);
+	}
+	// ========================== siklu addition end  ===========================
+
	if (!valid_user) {
		/* PAM auth succeeded but the username isn't allowed in for another reason
		(checkusername() failed) */
diff --git a/svr-chansession.c b/svr-chansession.c
index d090395..5dbf28b 100644
--- a/svr-chansession.c
+++ b/svr-chansession.c
@@ -607,7 +607,7 @@ static int sessionpty(struct ChanSess * chansess) {
 		dropbear_exit("Out of memory"); /* TODO disconnect */
 	}
 
-	pw = getpwnam(ses.authstate.pw_name);
+	pw = _getpwnam(ses.authstate.pw_name); // Siklu
 	if (!pw)
 		dropbear_exit("getpwnam failed after succeeding previously");
 	pty_setowner(pw, chansess->tty);
@@ -970,7 +970,8 @@ * etc. This is hazardous, so should only be used for debugging. */
	if ( !svr_opts.pass_on_env) {
 #ifndef DEBUG_VALGRIND
 #ifdef HAVE_CLEARENV
-		clearenv();
+		/* clearenv(); */ /* Siklu do not clear environment here. we need to relay all environment as-is
+				with environment received from remote tacacs server to our cli application */
 #else /* don't HAVE_CLEARENV */
		/* Yay for posix. */
		if (environ) { 
diff --git a/sysoptions.h b/sysoptions.h
index 3107a0e..78bc409 100644
--- a/sysoptions.h
+++ b/sysoptions.h
@@ -192,7 +192,7 @@ If you test it please contact the Dropbear author */
 								RECV_WINDOWEXTEND bytes */
 #define MAX_RECV_WINDOW (1024*1024) /* 1 MB should be enough */
 
-#define MAX_CHANNELS 1000 /* simple mem restriction, includes each tcp/x11
+#define MAX_CHANNELS 10/*Siklu, was 1000*/ /* simple mem restriction, includes each tcp/x11
 							connection, so can't be _too_ small */
 
 #define MAX_STRING_LEN (MAX(MAX_CMD_LEN, 2400)) /* Sun SSH needs 2400 for algos,
-- 
2.17.1

