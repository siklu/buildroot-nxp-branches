--- netsnmp-5.9_orig/agent/agent_trap.c.orig	2020-08-15 00:41:47.000000000 +0300
+++ netsnmp-5.9_new/agent/agent_trap.c	2022-06-02 07:52:48.489844624 +0300
@@ -62,6 +62,10 @@
 #include <net-snmp/agent/agent_trap.h>
 #include <net-snmp/agent/snmp_agent.h>
 #include <net-snmp/agent/agent_callbacks.h>
+#include <net-snmp/agent/agent_handler.h>
+#include <net-snmp/library/snmp_api.h>
+#include <net-snmp/library/snmp_client.h>
+#include <net-snmp/library/fd_event_manager.h>
 #include "agent_global_vars.h"
 
 #include <net-snmp/agent/agent_module_config.h>
@@ -88,6 +92,7 @@
     struct trap_sink *next;
     int             pdutype;
     int             version;
+	u_char			my_data[60];
 };
 
 struct trap_sink *sinks = NULL;
@@ -145,6 +150,26 @@
 	 * Trap session handling
 	 *
 	 *******************/
+int GetNumOfSinks( void)
+{
+    struct trap_sink *sink;
+	int numOf = 0;
+    for (sink = sinks; sink; sink = sink->next)
+		numOf ++;
+	return numOf;
+}
+
+
+void AddMyDataToLastSink( void * srcP, int srcLen)
+{
+	if(srcLen < sizeof(sinks->my_data))
+		memcpy( sinks->my_data, srcP, srcLen);
+}
+
+volatile int (* myBeforeSendTrapPtr)( void * my_data, netsnmp_session * sessionP, netsnmp_pdu *template_pdu) = NULL;
+
+volatile oid myEnterpriseOid[50];
+volatile int myEnterpriseOidLen = 0;
 
 void
 init_traps(void)
@@ -835,6 +860,10 @@
     in_addr_t             *pdu_in_addr_t;
     u_long                 uptime;
     struct trap_sink *sink;
+
+	enterprise = myEnterpriseOid;
+	enterprise_length = myEnterpriseOidLen;
+
     const char            *v1trapaddress;
     int                    res = 0;
 
@@ -1025,13 +1054,24 @@
             if (template_v1pdu &&
                 !netsnmp_ds_get_boolean(NETSNMP_DS_LIBRARY_ID,
                                         NETSNMP_DS_LIB_DISABLE_V1)) {
-                send_trap_to_sess(sink->sesp, template_v1pdu);
+			    int toDo = 1;
+			    if(myBeforeSendTrapPtr != NULL)
+			    	toDo = myBeforeSendTrapPtr( sink->my_data, sink->sesp, template_v1pdu);
+
+			    if(toDo != 0)
+                	send_trap_to_sess(sink->sesp, template_v1pdu);
             }
         } else
 #endif
         if (template_v2pdu) {
             template_v2pdu->command = sink->pdutype;
-            send_trap_to_sess(sink->sesp, template_v2pdu);
+
+			    int toDo = 1;
+			    if(myBeforeSendTrapPtr != NULL)
+			    	toDo = myBeforeSendTrapPtr( sink->my_data, sink->sesp, template_v2pdu);
+
+			    if(toDo != 0)
+	                send_trap_to_sess(sink->sesp, template_v2pdu);
         }
     }
 #ifndef NETSNMP_DISABLE_SNMPV1
--- netsnmp-5.9_orig/agent/snmpd.c	2020-08-15 00:41:47.000000000 +0300
+++ netsnmp-5.9-new/agent/snmpd.c	2022-06-02 07:53:36.322894405 +0300
@@ -405,6 +405,12 @@
     FILE           *PID;
 #endif
 
+    /* !!! DO NOT DELETE THE FOLLOWING 2 LINES !!! */ 
+    extern GetNumOfSinks(), AddMyDataToLastSink();
+    printf("%p %p %p %p %p %p %p %p\n", GetNumOfSinks, AddMyDataToLastSink,
+    		snmp_add_var, netsnmp_unregister_handler,
+    		snmp_unregister_callback, snmp_set_var_typed_integer,
+		register_readfd, unregister_readfd);
     SOCK_STARTUP;
 
 #ifndef NETSNMP_NO_SYSTEMD
